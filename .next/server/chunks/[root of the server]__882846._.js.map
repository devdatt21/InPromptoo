{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file://D%3A/experiments/next/prompt_discovery/utils/database.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nlet isConnected = false;\r\n\r\nexport const connectToDB = async () => {\r\n    mongoose.set('strictQuery', true);\r\n\r\n    if(isConnected) {\r\n        console.log(\"MongoDB is already connected\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        await mongoose.connect(process.env.MONGODB_URI, {\r\n            dbName: \"share_prompt\",\r\n            useNewUrlParser: true,\r\n            useUnifiedTopology: true,\r\n        })\r\n\r\n        isConnected = true;\r\n\r\n        console.log(\"MongoDB connected\");\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;AAEA,IAAI,cAAc;AAEX,MAAM,cAAc;IACvB,SAAS,GAAG,CAAC,eAAe;IAE5B,IAAG,aAAa;QACZ,QAAQ,GAAG,CAAC;QACZ;IACJ;IAEA,IAAI;QACA,MAAM,SAAS,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;YAC5C,QAAQ;YACR,iBAAiB;YACjB,oBAAoB;QACxB;QAEA,cAAc;QAEd,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;IAChB;AACJ"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file://D%3A/experiments/next/prompt_discovery/models/user.js"],"sourcesContent":["import {Schema, model, models} from \"mongoose\";\r\n\r\nconst UserSchema = new Schema({\r\n    email: {type: String, unique: [true, \"Email already exists\"], required: [true, \"Email is required\"]},\r\n    username: {type: String, required: [true, \"Username is required\"], match: [/^(?!.*\\\\.\\\\.)(?!.*\\\\.$)[\\\\w\\\\.\\\\s]+$/, \"Username invalid, it should contain 8-20 alphanumeric letters and be unique!\"]},\r\n    image: {type: String},\r\n});\r\n\r\nconst User = models.User || model(\"User\", UserSchema);\r\n\r\nexport default User;\r\n"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,aAAa,IAAI,OAAO;IAC1B,OAAO;QAAC,MAAM;QAAQ,QAAQ;YAAC;YAAM;SAAuB;QAAE,UAAU;YAAC;YAAM;SAAoB;IAAA;IACnG,UAAU;QAAC,MAAM;QAAQ,UAAU;YAAC;YAAM;SAAuB;QAAE,OAAO;YAAC;YAAwC;SAA+E;IAAA;IAClM,OAAO;QAAC,MAAM;IAAM;AACxB;AAEA,MAAM,OAAO,OAAO,IAAI,IAAI,MAAM,QAAQ;uCAE3B"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file://D%3A/experiments/next/prompt_discovery/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport { connectToDB } from \"@utils/database\";\r\nimport User from \"@models/user\";\r\n// console.log({clientId: process.env.GOOGLE_ID,\r\n//     clientSecret: process.env.GOOGLE_CLIENT_SECRET})\r\n\r\nexport const authOptions = {\r\n    providers: [GoogleProvider({\r\n        clientId: process.env.GOOGLE_ID,\r\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n    })],\r\n    async session({session}) {\r\n        const sessionUser = await User.findOne({email: session.user.email});\r\n        session.user.id = sessionUser._id.toString();\r\n        return session;\r\n    },\r\n    async signIn({profile}) {\r\n        try {\r\n            await connectToDB();\r\n\r\n            //check if user already exists\r\n            const userExists = await User.findOne({email: profile.email});\r\n\r\n            //if not, create a new user\r\n            if(!userExists) {\r\n                await User.create({\r\n                    email: profile.email,\r\n                    username: profile.name.replace(\" \", \"\").toLowerCase(),\r\n                    image: profile.image,\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return false;\r\n        }\r\n    },\r\n}\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport {handler as GET, handler as POST};"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;AAIO,MAAM,cAAc;IACvB,WAAW;QAAC,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACvB,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAClD;KAAG;IACH,MAAM,SAAQ,EAAC,OAAO,EAAC;QACnB,MAAM,cAAc,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAC,OAAO,QAAQ,IAAI,CAAC,KAAK;QAAA;QACjE,QAAQ,IAAI,CAAC,EAAE,GAAG,YAAY,GAAG,CAAC,QAAQ;QAC1C,OAAO;IACX;IACA,MAAM,QAAO,EAAC,OAAO,EAAC;QAClB,IAAI;YACA,MAAM,CAAA,GAAA,mHAAA,CAAA,cAAW,AAAD;YAEhB,8BAA8B;YAC9B,MAAM,aAAa,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;gBAAC,OAAO,QAAQ,KAAK;YAAA;YAE3D,2BAA2B;YAC3B,IAAG,CAAC,YAAY;gBACZ,MAAM,gHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;oBACd,OAAO,QAAQ,KAAK;oBACpB,UAAU,QAAQ,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,WAAW;oBACnD,OAAO,QAAQ,KAAK;gBACxB;YACJ;YAEA,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO;QACX;IACJ;AACJ;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE"}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}